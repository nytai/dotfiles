" Plugged {{{
set shell=/bin/sh

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


call plug#begin('~/.vim/plugged')

Plug 'junegunn/vim-plug'

Plug 'scrooloose/nerdtree'
Plug 'bling/vim-airline'
Plug 'bkad/CamelCaseMotion'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'airblade/vim-gitgutter'
Plug 'kristijanhusak/vim-multiple-cursors'
Plug 'vim-scripts/Align'
Plug 'valloric/MatchTagAlways'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'
Plug 'jiangmiao/auto-pairs'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'wesQ3/vim-windowswap'
Plug 'tpope/vim-surround'
Plug 'kien/ctrlp.vim'
Plug 'ervandew/supertab'
Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'gcmt/wildfire.vim'
Plug 'Yggdroot/indentLine'
Plug 'w0rp/ale'
Plug 'tpope/vim-rails'
Plug 'scrooloose/nerdcommenter'
" Plug 'jordwalke/VimSplitBalancer'
Plug 'reasonml-editor/vim-reason-plus'

" Language Server
if has('nvim')
  Plug 'autozimu/LanguageClient-neovim', {
      \ 'branch': 'next',
      \ 'do': 'bash install.sh',
      \ }

  Plug 'junegunn/fzf'
  Plug 'roxma/nvim-completion-manager'
endif

" Front End
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'ap/vim-css-color'
Plug 'miripiruni/CSScomb-for-Vim'

" Color Schemes
Plug 'flazz/vim-colorschemes'

call plug#end()            " required
" }}}

" Plugin Settings {{{
let g:windowswap_map_keys = 0 "prevent default bindings
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git|vcr_cassettes|log|tmp|vendor'
let g:NERDSpaceDelims = 1

if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
else
  echo "You should install ag!"
endif
" }}}

" Airline {{{
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 0 "change 0 to 1 if you have a powerline font
set laststatus=2
set t_Co=256
" }}}

" NERDTree {{{
let g:NERDTreeMapChangeRoot =  "`"

nmap <Leader>] :NERDTreeTabsToggle<CR>
nnoremap <Space>c :NERDTreeCWD<CR>
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=0
let NERDTreeQuitOnOpen = 1
let NERDTreeIgnore=['\.pyc$', '\~$']
let NERDTreeShowLineNumbers = 1
let NERDTreeShowHidden = 1
let g:NERDTreeWinSize = 25

function! NERDTreeQuit()
  redir => buffersoutput
  silent buffers
  redir END
"                     1BufNo  2Mods.     3File           4LineNo
  let pattern = '^\s*\(\d\+\)\(.....\) "\(.*\)"\s\+line \(\d\+\)$'
  let windowfound = 0

  for bline in split(buffersoutput, "\n")
    let m = matchlist(bline, pattern)

    if (len(m) > 0)
      if (m[2] =~ '..a..')
        let windowfound = 1
      endif
    endif
  endfor

  if (!windowfound)
    quitall
  endif
endfunction
autocmd WinEnter * call NERDTreeQuit()
" }}}

" Language Server {{{
if has('nvim')
  " Required for operations modifying multiple buffers like rename.
  set hidden

  " let g:LanguageClient_autoStart = 1
  let g:LanguageClient_serverCommands = {}

  if executable('javascript-typescript-stdio')
    let g:LanguageClient_serverCommands.javascript = ['javascript-typescript-stdio']
    let g:LanguageClient_serverCommands['javascript.jsx'] = ['javascript-typescript-stdio']
    autocmd FileType javascript setlocal omnifunc=LanguageClient#complete
    autocmd FileType javascript.jsx setlocal omnifunc=LanguageClient#complete
  endif

  if executable('ocaml-language-server')
    let g:LanguageClient_serverCommands.reason = ['ocaml-language-server', '--stdio']
    let g:LanguageClient_serverCommands.ocaml = ['ocaml-language-server', '--stdio']
  endif

  nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
  nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
  nnoremap <silent> gf :call LanguageClient_textDocument_formatting()<cr>
  nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
endif

" }}}

" General {{{

if (has("nvim"))
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

" if (has("termguicolors"))
"   set termguicolors
" endif

colorscheme wombat256mod

set nocompatible
set foldmethod=marker
set linebreak

set number

set mouse=a

set encoding=utf-8
set fileencodings=utf-8

set autoread
set autoindent
set smartindent
set cindent
set background=dark
set expandtab
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set wildignore=*.pyc
set ignorecase
set smartcase
set hlsearch
set incsearch
set shiftround
set history=1000
set undolevels=1000
set noswapfile
set nobackup
set number
set linespace=3
set showcmd
set wildmode=longest,list,full
set wildmenu
set backspace=indent,eol,start

let &t_SI.="\e[5 q"
let &t_EI.="\e[1 q"
let g:javascript_plugin_flow = 1

" Remove trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" Write all buffers when window goes out of focus
autocmd FocusLost * silent! wall
" }}}

" Some Useful Key Mappings {{{

"Split swap
nmap <Tab> :CtrlPBuffer<CR>
nmap <Leader>f :CtrlPLine<CR>
nnoremap <silent> <Leader>sw :call WindowSwap#EasyWindowSwap()<CR>
nmap <Leader>` :call WindowSwap#EasyWindowSwap()<CR><Leader>[:call WindowSwap#EasyWindowSwap()<CR>

"for unhighlighing the selections
nmap <Space>x :let @/=''<CR>

"split switch
nnoremap <Leader>[ <C-W>w

"System clipboard
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

"Keep the cursor in the same place after yank
vmap y ygv<Esc>

"Reload vimrc
nmap <F5> :source ~/.vimrc<CR>

"New Tab
nmap <Leader>n :tabnew<CR>

"Paste mode toggle
set pastetoggle=<F5><F5>

"Keep selection after indent
vnoremap > ><CR>gv
vnoremap < <<CR>gv

"Camel case motion (with shift)
map <Space>w <Plug>CamelCaseMotion_w
map <Space>b <Plug>CamelCaseMotion_b
map <Space>e <Plug>CamelCaseMotion_e

"Remove trailing whitespace from lines
nnoremap <F8> :let _s=@/<Bar>:%s/;\s\+$/;/e<Bar>:let @/=_s<Bar><CR>
" }}}
